package org.web3j.model;

import io.reactivex.Flowable;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.DynamicStruct;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.10.3.
 */
@SuppressWarnings("rawtypes")
public class VaccineAppointment extends Contract {
    public static final String BINARY = "0x6080604052600160005534801561001557600080fd5b506131bf806100256000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c806365ebbe9b1161005b57806365ebbe9b146101255780637933570c14610141578063a7e644051461015f578063d23003101461017b57610088565b806306ec91e01461008d5780630d943da2146100bd5780634095b117146100ed5780635ed1940014610109575b600080fd5b6100a760048036038101906100a29190612555565b6101ab565b6040516100b49190612cc5565b60405180910390f35b6100d760048036038101906100d29190612696565b61087c565b6040516100e49190612da7565b60405180910390f35b61010760048036038101906101029190612696565b610cdf565b005b610123600480360381019061011e91906125bf565b610eb1565b005b61013f600480360381019061013a91906126bf565b611224565b005b6101496114a6565b6040516101569190612cc5565b60405180910390f35b61017960048036038101906101749190612696565b6119d8565b005b6101956004803603810190610190919061257e565b611ceb565b6040516101a29190612cc5565b60405180910390f35b60606000805b60028054905081101561028e578373ffffffffffffffffffffffffffffffffffffffff166001600060028481548110610213577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200154815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141561027b57818061027790613031565b9250505b808061028690613031565b9150506101b1565b5060008167ffffffffffffffff8111156102d1577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405190808252806020026020018201604052801561030a57816020015b6102f761235a565b8152602001906001900390816102ef5790505b5090506000805b600280549050811015610870578573ffffffffffffffffffffffffffffffffffffffff166001600060028481548110610373577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200154815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141561085d57600160006002838154811061040a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002001548152602001908152602001600020604051806101200160405290816000820154815260200160018201805461044990612fff565b80601f016020809104026020016040519081016040528092919081815260200182805461047590612fff565b80156104c25780601f10610497576101008083540402835291602001916104c2565b820191906000526020600020905b8154815290600101906020018083116104a557829003601f168201915b505050505081526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016004820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016005820180546105dd90612fff565b80601f016020809104026020016040519081016040528092919081815260200182805461060990612fff565b80156106565780601f1061062b57610100808354040283529160200191610656565b820191906000526020600020905b81548152906001019060200180831161063957829003601f168201915b5050505050815260200160068201805461066f90612fff565b80601f016020809104026020016040519081016040528092919081815260200182805461069b90612fff565b80156106e85780601f106106bd576101008083540402835291602001916106e8565b820191906000526020600020905b8154815290600101906020018083116106cb57829003601f168201915b5050505050815260200160078201805461070190612fff565b80601f016020809104026020016040519081016040528092919081815260200182805461072d90612fff565b801561077a5780601f1061074f5761010080835404028352916020019161077a565b820191906000526020600020905b81548152906001019060200180831161075d57829003601f168201915b505050505081526020016008820160009054906101000a900460ff1660038111156107ce577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6003811115610806577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b81525050838381518110610843577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010181905250818061085990613031565b9250505b808061086890613031565b915050610311565b50819350505050919050565b61088461235a565b6000600160008481526020019081526020016000206000015414156108de576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108d590612d87565b60405180910390fd5b60016000838152602001908152602001600020604051806101200160405290816000820154815260200160018201805461091790612fff565b80601f016020809104026020016040519081016040528092919081815260200182805461094390612fff565b80156109905780601f1061096557610100808354040283529160200191610990565b820191906000526020600020905b81548152906001019060200180831161097357829003601f168201915b505050505081526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016004820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600582018054610aab90612fff565b80601f0160208091040260200160405190810160405280929190818152602001828054610ad790612fff565b8015610b245780601f10610af957610100808354040283529160200191610b24565b820191906000526020600020905b815481529060010190602001808311610b0757829003601f168201915b50505050508152602001600682018054610b3d90612fff565b80601f0160208091040260200160405190810160405280929190818152602001828054610b6990612fff565b8015610bb65780601f10610b8b57610100808354040283529160200191610bb6565b820191906000526020600020905b815481529060010190602001808311610b9957829003601f168201915b50505050508152602001600782018054610bcf90612fff565b80601f0160208091040260200160405190810160405280929190818152602001828054610bfb90612fff565b8015610c485780601f10610c1d57610100808354040283529160200191610c48565b820191906000526020600020905b815481529060010190602001808311610c2b57829003601f168201915b505050505081526020016008820160009054906101000a900460ff166003811115610c9c577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6003811115610cd4577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b815250509050919050565b600060016000838152602001908152602001600020600001541415610d39576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d3090612d87565b60405180910390fd5b60026003811115610d73577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6001600083815260200190815260200160002060080160009054906101000a900460ff166003811115610dcf577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b14610e0f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e0690612ce7565b60405180910390fd5b60036001600083815260200190815260200160002060080160006101000a81548160ff02191690836003811115610e6f577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b02179055507f2da7b23ca63c1eb969eee5fae4acb98186abecf5358b0354a82a5183ebca6b2a816003604051610ea6929190612e4c565b60405180910390a150565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610f21576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f1890612d07565b60405180910390fd5b6000806000815480929190610f3590613031565b9190505590506040518061012001604052808281526020018781526020018373ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200186815260200185815260200184815260200160006003811115610ff5577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b81525060016000838152602001908152602001600020600082015181600001556020820151816001019080519060200190611031929190612420565b5060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060608201518160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060808201518160040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060a0820151816005019080519060200190611123929190612420565b5060c0820151816006019080519060200190611140929190612420565b5060e082015181600701908051906020019061115d929190612420565b506101008201518160080160006101000a81548160ff021916908360038111156111b0577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b021790555090505060028190806001815401808255809150506001900390600052602060002001600090919091909150557fcb2b1868153897e89fd5f7518b9d22657b8299e1214d42a8b1be6199de380c0181838760405161121493929190612e0e565b60405180910390a1505050505050565b60006001600085815260200190815260200160002060000154141561127e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161127590612d87565b60405180910390fd5b600060038111156112b8577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6001600085815260200190815260200160002060080160009054906101000a900460ff166003811115611314577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b14611354576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161134b90612d67565b60405180910390fd5b816001600085815260200190815260200160002060030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550806001600085815260200190815260200160002060040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060026001600085815260200190815260200160002060080160006101000a81548160ff0219169083600381111561145e577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b02179055507fed654e7600f50293230df243f4fb401fdbd5620f54aa379ef96a58e5ed85e93883838360026040516114999493929190612dc9565b60405180910390a1505050565b6060600060028054905067ffffffffffffffff8111156114ef577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405190808252806020026020018201604052801561152857816020015b61151561235a565b81526020019060019003908161150d5790505b50905060005b6002805490508110156119d0576001600060028381548110611579577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200154815260200190815260200160002060405180610120016040529081600082015481526020016001820180546115b890612fff565b80601f01602080910402602001604051908101604052809291908181526020018280546115e490612fff565b80156116315780601f1061160657610100808354040283529160200191611631565b820191906000526020600020905b81548152906001019060200180831161161457829003601f168201915b505050505081526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016004820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160058201805461174c90612fff565b80601f016020809104026020016040519081016040528092919081815260200182805461177890612fff565b80156117c55780601f1061179a576101008083540402835291602001916117c5565b820191906000526020600020905b8154815290600101906020018083116117a857829003601f168201915b505050505081526020016006820180546117de90612fff565b80601f016020809104026020016040519081016040528092919081815260200182805461180a90612fff565b80156118575780601f1061182c57610100808354040283529160200191611857565b820191906000526020600020905b81548152906001019060200180831161183a57829003601f168201915b5050505050815260200160078201805461187090612fff565b80601f016020809104026020016040519081016040528092919081815260200182805461189c90612fff565b80156118e95780601f106118be576101008083540402835291602001916118e9565b820191906000526020600020905b8154815290600101906020018083116118cc57829003601f168201915b505050505081526020016008820160009054906101000a900460ff16600381111561193d577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6003811115611975577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b815250508282815181106119b2577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001018190525080806119c890613031565b91505061152e565b508091505090565b600060016000838152602001908152602001600020600001541415611a32576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a2990612d87565b60405180910390fd5b60006003811115611a6c577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6001600083815260200190815260200160002060080160009054906101000a900460ff166003811115611ac8577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b1480611b67575060026003811115611b09577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6001600083815260200190815260200160002060080160009054906101000a900460ff166003811115611b65577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b145b611ba6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b9d90612d47565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff166001600083815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611c4a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c4190612d27565b60405180910390fd5b600180600083815260200190815260200160002060080160006101000a81548160ff02191690836003811115611ca9577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b02179055507f2da7b23ca63c1eb969eee5fae4acb98186abecf5358b0354a82a5183ebca6b2a816001604051611ce0929190612e4c565b60405180910390a150565b60606000805b600280549050811015611d9d5783805190602001206001600060028481548110611d44577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002001548152602001908152602001600020600501604051611d6d9190612cae565b60405180910390201415611d8a578180611d8690613031565b9250505b8080611d9590613031565b915050611cf1565b5060008167ffffffffffffffff811115611de0577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051908082528060200260200182016040528015611e1957816020015b611e0661235a565b815260200190600190039081611dfe5790505b5090506000805b60028054905081101561234e5785805190602001206001600060028481548110611e73577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002001548152602001908152602001600020600501604051611e9c9190612cae565b6040518091039020141561233b576001600060028381548110611ee8577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020015481526020019081526020016000206040518061012001604052908160008201548152602001600182018054611f2790612fff565b80601f0160208091040260200160405190810160405280929190818152602001828054611f5390612fff565b8015611fa05780601f10611f7557610100808354040283529160200191611fa0565b820191906000526020600020905b815481529060010190602001808311611f8357829003601f168201915b505050505081526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016004820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016005820180546120bb90612fff565b80601f01602080910402602001604051908101604052809291908181526020018280546120e790612fff565b80156121345780601f1061210957610100808354040283529160200191612134565b820191906000526020600020905b81548152906001019060200180831161211757829003601f168201915b5050505050815260200160068201805461214d90612fff565b80601f016020809104026020016040519081016040528092919081815260200182805461217990612fff565b80156121c65780601f1061219b576101008083540402835291602001916121c6565b820191906000526020600020905b8154815290600101906020018083116121a957829003601f168201915b505050505081526020016007820180546121df90612fff565b80601f016020809104026020016040519081016040528092919081815260200182805461220b90612fff565b80156122585780601f1061222d57610100808354040283529160200191612258565b820191906000526020600020905b81548152906001019060200180831161223b57829003601f168201915b505050505081526020016008820160009054906101000a900460ff1660038111156122ac577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60038111156122e4577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b81525050838381518110612321577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010181905250818061233790613031565b9250505b808061234690613031565b915050611e20565b50819350505050919050565b6040518061012001604052806000815260200160608152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016060815260200160608152602001606081526020016000600381111561241a577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b81525090565b82805461242c90612fff565b90600052602060002090601f01602090048101928261244e5760008555612495565b82601f1061246757805160ff1916838001178555612495565b82800160010185558215612495579182015b82811115612494578251825591602001919060010190612479565b5b5090506124a291906124a6565b5090565b5b808211156124bf5760008160009055506001016124a7565b5090565b60006124d66124d184612ea6565b612e75565b9050828152602081018484840111156124ee57600080fd5b6124f9848285612fbd565b509392505050565b6000813590506125108161315b565b92915050565b600082601f83011261252757600080fd5b81356125378482602086016124c3565b91505092915050565b60008135905061254f81613172565b92915050565b60006020828403121561256757600080fd5b600061257584828501612501565b91505092915050565b60006020828403121561259057600080fd5b600082013567ffffffffffffffff8111156125aa57600080fd5b6125b684828501612516565b91505092915050565b600080600080600060a086880312156125d757600080fd5b600086013567ffffffffffffffff8111156125f157600080fd5b6125fd88828901612516565b955050602086013567ffffffffffffffff81111561261a57600080fd5b61262688828901612516565b945050604086013567ffffffffffffffff81111561264357600080fd5b61264f88828901612516565b935050606086013567ffffffffffffffff81111561266c57600080fd5b61267888828901612516565b925050608061268988828901612501565b9150509295509295909350565b6000602082840312156126a857600080fd5b60006126b684828501612540565b91505092915050565b6000806000606084860312156126d457600080fd5b60006126e286828701612540565b93505060206126f386828701612501565b925050604061270486828701612501565b9150509250925092565b600061271a8383612adc565b905092915050565b61272b81612f5c565b82525050565b61273a81612f5c565b82525050565b600061274b82612efb565b6127558185612f1e565b93508360208202850161276785612ed6565b8060005b858110156127a35784840389528151612784858261270e565b945061278f83612f11565b925060208a0199505060018101905061276b565b50829750879550505050505092915050565b600081546127c281612fff565b6127cc8186612f2f565b945060018216600081146127e757600181146127f85761282b565b60ff1983168652818601935061282b565b61280185612ee6565b60005b8381101561282357815481890152600182019150602081019050612804565b838801955050505b50505092915050565b61283d81612fab565b82525050565b61284c81612fab565b82525050565b600061285d82612f06565b6128678185612f3a565b9350612877818560208601612fcc565b61288081613136565b840191505092915050565b600061289682612f06565b6128a08185612f4b565b93506128b0818560208601612fcc565b6128b981613136565b840191505092915050565b60006128d1602883612f4b565b91507f4170706f696e746d656e74206d75737420626520696e2050524f43455353494e60008301527f47207374617475730000000000000000000000000000000000000000000000006020830152604082019050919050565b6000612937601783612f4b565b91507f496e76616c69642070617469656e7420616464726573730000000000000000006000830152602082019050919050565b6000612977602783612f4b565b91507f4f6e6c792070617469656e742063616e2063616e63656c20746865206170706f60008301527f696e746d656e74000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006129dd603383612f4b565b91507f4170706f696e746d656e74206d75737420626520696e2050454e44494e47206f60008301527f722050524f43455353494e4720737461747573000000000000000000000000006020830152604082019050919050565b6000612a43602583612f4b565b91507f4170706f696e746d656e74206d75737420626520696e2050454e44494e47207360008301527f74617475730000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000612aa9601a83612f4b565b91507f4170706f696e746d656e7420646f6573206e6f742065786973740000000000006000830152602082019050919050565b600061012083016000830151612af56000860182612c90565b5060208301518482036020860152612b0d8282612852565b9150506040830151612b226040860182612722565b506060830151612b356060860182612722565b506080830151612b486080860182612722565b5060a083015184820360a0860152612b608282612852565b91505060c083015184820360c0860152612b7a8282612852565b91505060e083015184820360e0860152612b948282612852565b915050610100830151612bab610100860182612834565b508091505092915050565b600061012083016000830151612bcf6000860182612c90565b5060208301518482036020860152612be78282612852565b9150506040830151612bfc6040860182612722565b506060830151612c0f6060860182612722565b506080830151612c226080860182612722565b5060a083015184820360a0860152612c3a8282612852565b91505060c083015184820360c0860152612c548282612852565b91505060e083015184820360e0860152612c6e8282612852565b915050610100830151612c85610100860182612834565b508091505092915050565b612c9981612fa1565b82525050565b612ca881612fa1565b82525050565b6000612cba82846127b5565b915081905092915050565b60006020820190508181036000830152612cdf8184612740565b905092915050565b60006020820190508181036000830152612d00816128c4565b9050919050565b60006020820190508181036000830152612d208161292a565b9050919050565b60006020820190508181036000830152612d408161296a565b9050919050565b60006020820190508181036000830152612d60816129d0565b9050919050565b60006020820190508181036000830152612d8081612a36565b9050919050565b60006020820190508181036000830152612da081612a9c565b9050919050565b60006020820190508181036000830152612dc18184612bb6565b905092915050565b6000608082019050612dde6000830187612c9f565b612deb6020830186612731565b612df86040830185612731565b612e056060830184612843565b95945050505050565b6000606082019050612e236000830186612c9f565b612e306020830185612731565b8181036040830152612e42818461288b565b9050949350505050565b6000604082019050612e616000830185612c9f565b612e6e6020830184612843565b9392505050565b6000604051905081810181811067ffffffffffffffff82111715612e9c57612e9b613107565b5b8060405250919050565b600067ffffffffffffffff821115612ec157612ec0613107565b5b601f19601f8301169050602081019050919050565b6000819050602082019050919050565b60008190508160005260206000209050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b6000612f6782612f81565b9050919050565b6000819050612f7c82613147565b919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000612fb682612f6e565b9050919050565b82818337600083830152505050565b60005b83811015612fea578082015181840152602081019050612fcf565b83811115612ff9576000848401525b50505050565b6000600282049050600182168061301757607f821691505b6020821081141561302b5761302a6130d8565b5b50919050565b600061303c82612fa1565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561306f5761306e61307a565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b60048110613158576131576130a9565b5b50565b61316481612f5c565b811461316f57600080fd5b50565b61317b81612fa1565b811461318657600080fd5b5056fea26469706673582212206c51fbab8cbb3237dfe39c72c0d8bed72ae50d9a2e316be7a1949acc7ef8575f64736f6c63430008000033";

    public static final String FUNC_CREATEAPPOINTMENT = "createAppointment";

    public static final String FUNC_GETALLAPPOINTMENTS = "getAllAppointments";

    public static final String FUNC_GETAPPOINTMENTSBYPATIENT = "getAppointmentsByPatient";

    public static final String FUNC_GETAPPOINTMENTSBYCENTER = "getAppointmentsByCenter";

    public static final String FUNC_PROCESSAPPOINTMENT = "processAppointment";

    public static final String FUNC_COMPLETEAPPOINTMENT = "completeAppointment";

    public static final String FUNC_CANCELAPPOINTMENT = "cancelAppointment";

    public static final String FUNC_GETAPPOINTMENT = "getAppointment";

    public static final Event APPOINTMENTCREATED_EVENT = new Event("AppointmentCreated", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event APPOINTMENTUPDATED_EVENT = new Event("AppointmentUpdated", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint8>() {}));
    ;

    public static final Event STATUSUPDATED_EVENT = new Event("StatusUpdated", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint8>() {}));
    ;

    @Deprecated
    protected VaccineAppointment(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected VaccineAppointment(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected VaccineAppointment(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected VaccineAppointment(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static List<AppointmentCreatedEventResponse> getAppointmentCreatedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(APPOINTMENTCREATED_EVENT, transactionReceipt);
        ArrayList<AppointmentCreatedEventResponse> responses = new ArrayList<AppointmentCreatedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            AppointmentCreatedEventResponse typedResponse = new AppointmentCreatedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.appointmentId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.patientAddress = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.centerName = (String) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static AppointmentCreatedEventResponse getAppointmentCreatedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(APPOINTMENTCREATED_EVENT, log);
        AppointmentCreatedEventResponse typedResponse = new AppointmentCreatedEventResponse();
        typedResponse.log = log;
        typedResponse.appointmentId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.patientAddress = (String) eventValues.getNonIndexedValues().get(1).getValue();
        typedResponse.centerName = (String) eventValues.getNonIndexedValues().get(2).getValue();
        return typedResponse;
    }

    public Flowable<AppointmentCreatedEventResponse> appointmentCreatedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getAppointmentCreatedEventFromLog(log));
    }

    public Flowable<AppointmentCreatedEventResponse> appointmentCreatedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPOINTMENTCREATED_EVENT));
        return appointmentCreatedEventFlowable(filter);
    }

    public static List<AppointmentUpdatedEventResponse> getAppointmentUpdatedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(APPOINTMENTUPDATED_EVENT, transactionReceipt);
        ArrayList<AppointmentUpdatedEventResponse> responses = new ArrayList<AppointmentUpdatedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            AppointmentUpdatedEventResponse typedResponse = new AppointmentUpdatedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.appointmentId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.doctorAddress = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.cashierAddress = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.status = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static AppointmentUpdatedEventResponse getAppointmentUpdatedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(APPOINTMENTUPDATED_EVENT, log);
        AppointmentUpdatedEventResponse typedResponse = new AppointmentUpdatedEventResponse();
        typedResponse.log = log;
        typedResponse.appointmentId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.doctorAddress = (String) eventValues.getNonIndexedValues().get(1).getValue();
        typedResponse.cashierAddress = (String) eventValues.getNonIndexedValues().get(2).getValue();
        typedResponse.status = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
        return typedResponse;
    }

    public Flowable<AppointmentUpdatedEventResponse> appointmentUpdatedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getAppointmentUpdatedEventFromLog(log));
    }

    public Flowable<AppointmentUpdatedEventResponse> appointmentUpdatedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPOINTMENTUPDATED_EVENT));
        return appointmentUpdatedEventFlowable(filter);
    }

    public static List<StatusUpdatedEventResponse> getStatusUpdatedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(STATUSUPDATED_EVENT, transactionReceipt);
        ArrayList<StatusUpdatedEventResponse> responses = new ArrayList<StatusUpdatedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            StatusUpdatedEventResponse typedResponse = new StatusUpdatedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.appointmentId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.newStatus = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static StatusUpdatedEventResponse getStatusUpdatedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(STATUSUPDATED_EVENT, log);
        StatusUpdatedEventResponse typedResponse = new StatusUpdatedEventResponse();
        typedResponse.log = log;
        typedResponse.appointmentId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.newStatus = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<StatusUpdatedEventResponse> statusUpdatedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getStatusUpdatedEventFromLog(log));
    }

    public Flowable<StatusUpdatedEventResponse> statusUpdatedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(STATUSUPDATED_EVENT));
        return statusUpdatedEventFlowable(filter);
    }

    public RemoteFunctionCall<TransactionReceipt> createAppointment(String _vaccineName, String _centerName, String _date, String _time, String _patientAddress) {
        final Function function = new Function(
                FUNC_CREATEAPPOINTMENT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_vaccineName), 
                new org.web3j.abi.datatypes.Utf8String(_centerName), 
                new org.web3j.abi.datatypes.Utf8String(_date), 
                new org.web3j.abi.datatypes.Utf8String(_time), 
                new org.web3j.abi.datatypes.Address(160, _patientAddress)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<List> getAllAppointments() {
        final Function function = new Function(FUNC_GETALLAPPOINTMENTS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Appointment>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<List> getAppointmentsByPatient(String _patientAddress) {
        final Function function = new Function(FUNC_GETAPPOINTMENTSBYPATIENT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _patientAddress)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Appointment>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<List> getAppointmentsByCenter(String _centerName) {
        final Function function = new Function(FUNC_GETAPPOINTMENTSBYCENTER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_centerName)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Appointment>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> processAppointment(BigInteger _appointmentId, String _doctorAddress, String _cashierAddress) {
        final Function function = new Function(
                FUNC_PROCESSAPPOINTMENT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_appointmentId), 
                new org.web3j.abi.datatypes.Address(160, _doctorAddress), 
                new org.web3j.abi.datatypes.Address(160, _cashierAddress)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> completeAppointment(BigInteger _appointmentId) {
        final Function function = new Function(
                FUNC_COMPLETEAPPOINTMENT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_appointmentId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> cancelAppointment(BigInteger _appointmentId) {
        final Function function = new Function(
                FUNC_CANCELAPPOINTMENT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_appointmentId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Appointment> getAppointment(BigInteger _appointmentId) {
        final Function function = new Function(FUNC_GETAPPOINTMENT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_appointmentId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Appointment>() {}));
        return executeRemoteCallSingleValueReturn(function, Appointment.class);
    }

    @Deprecated
    public static VaccineAppointment load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new VaccineAppointment(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static VaccineAppointment load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new VaccineAppointment(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static VaccineAppointment load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new VaccineAppointment(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static VaccineAppointment load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new VaccineAppointment(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<VaccineAppointment> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(VaccineAppointment.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<VaccineAppointment> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(VaccineAppointment.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<VaccineAppointment> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(VaccineAppointment.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<VaccineAppointment> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(VaccineAppointment.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static class Appointment extends DynamicStruct {
        public BigInteger appointmentId;

        public String vaccineName;

        public String patientAddress;

        public String doctorAddress;

        public String cashierAddress;

        public String centerName;

        public String date;

        public String time;

        public BigInteger status;

        public Appointment(BigInteger appointmentId, String vaccineName, String patientAddress, String doctorAddress, String cashierAddress, String centerName, String date, String time, BigInteger status) {
            super(new org.web3j.abi.datatypes.generated.Uint256(appointmentId), 
                    new org.web3j.abi.datatypes.Utf8String(vaccineName), 
                    new org.web3j.abi.datatypes.Address(160, patientAddress), 
                    new org.web3j.abi.datatypes.Address(160, doctorAddress), 
                    new org.web3j.abi.datatypes.Address(160, cashierAddress), 
                    new org.web3j.abi.datatypes.Utf8String(centerName), 
                    new org.web3j.abi.datatypes.Utf8String(date), 
                    new org.web3j.abi.datatypes.Utf8String(time), 
                    new org.web3j.abi.datatypes.generated.Uint8(status));
            this.appointmentId = appointmentId;
            this.vaccineName = vaccineName;
            this.patientAddress = patientAddress;
            this.doctorAddress = doctorAddress;
            this.cashierAddress = cashierAddress;
            this.centerName = centerName;
            this.date = date;
            this.time = time;
            this.status = status;
        }

        public Appointment(Uint256 appointmentId, Utf8String vaccineName, Address patientAddress, Address doctorAddress, Address cashierAddress, Utf8String centerName, Utf8String date, Utf8String time, Uint8 status) {
            super(appointmentId, vaccineName, patientAddress, doctorAddress, cashierAddress, centerName, date, time, status);
            this.appointmentId = appointmentId.getValue();
            this.vaccineName = vaccineName.getValue();
            this.patientAddress = patientAddress.getValue();
            this.doctorAddress = doctorAddress.getValue();
            this.cashierAddress = cashierAddress.getValue();
            this.centerName = centerName.getValue();
            this.date = date.getValue();
            this.time = time.getValue();
            this.status = status.getValue();
        }
    }

    public static class AppointmentCreatedEventResponse extends BaseEventResponse {
        public BigInteger appointmentId;

        public String patientAddress;

        public String centerName;
    }

    public static class AppointmentUpdatedEventResponse extends BaseEventResponse {
        public BigInteger appointmentId;

        public String doctorAddress;

        public String cashierAddress;

        public BigInteger status;
    }

    public static class StatusUpdatedEventResponse extends BaseEventResponse {
        public BigInteger appointmentId;

        public BigInteger newStatus;
    }
}
